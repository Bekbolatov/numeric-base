(function() {
  var M01, M02, M03, M04, M05, M06, M07, M08, M09, M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24, M25, M26, M27, M28, M29, M30, ProblemSet,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  M01 = (function() {
    function M01() {}

    M01.prototype.r = document.numeric.modules.RandomFunctions;

    M01.prototype.generate = function() {
      var a, b;
      a = this.r.random(21, 50);
      b = this.r.random(3, 40);
      return [['' + a + ' + ' + b + ' = ?'], a + b];
    };

    return M01;

  })();

  M02 = (function() {
    function M02() {}

    M02.prototype.r = document.numeric.modules.RandomFunctions;

    M02.prototype.h = document.numeric.modules.HyperTextManager;

    M02.prototype.increaseRandomly = function(a, b) {
      var k, method;
      method = this.r.randomFromList([0, 1, 2, 3]);
      if (method === 0) {
        k = this.r.random(1, 2);
        if (a < b) {
          return [a + k, b + k];
        } else {
          return [a + k, b];
        }
      } else if (method === 1) {
        return [a + this.r.random(1, 2), b];
      } else if (method === 2) {
        if (b > 2) {
          return [a, Math.max(2, b - this.r.random(1, 2))];
        } else {
          return [a + 1, b + 1];
        }
      } else {
        k = Math.ceil((b + 1) / a);
        if (b >= k + 2) {
          return [a - 1, b - k];
        } else {
          return [a + 1, b + 1];
        }
      }
    };

    M02.prototype.generate = function() {
      var answer, answers, correct, i, inc, index, m, n, _i, _ref, _ref1;
      m = this.r.random(1, 6);
      if (m > 3) {
        n = m + this.r.random(5, 9);
      } else {
        n = m + this.r.random(1, 6);
      }
      correct = [m, n];
      inc = [];
      for (i = _i = 1; _i <= 4; i = ++_i) {
        _ref = this.increaseRandomly(m, n), m = _ref[0], n = _ref[1];
        inc.push([m, n]);
      }
      _ref1 = this.r.shuffleAnswers4(inc, correct), answers = _ref1[0], index = _ref1[1];
      answers = (function() {
        var _j, _len, _results;
        _results = [];
        for (_j = 0, _len = answers.length; _j < _len; _j++) {
          answer = answers[_j];
          _results.push(this.h.fraction(answer[0], answer[1]));
        }
        return _results;
      }).call(this);
      return [['What is the smallest fraction?', answers], index];
    };

    return M02;

  })();

  M03 = (function() {
    function M03() {}

    M03.prototype.r = document.numeric.modules.RandomFunctions;

    M03.prototype.generate = function() {
      var a, b;
      a = this.r.random(21, 50);
      b = this.r.random(3, 40);
      return [['' + a + ' + ' + b + ' = ?'], a + b];
    };

    return M03;

  })();

  M04 = (function() {
    function M04() {
      this.generate = __bind(this.generate, this);
      this.generateDataForQuestionType04 = __bind(this.generateDataForQuestionType04, this);
    }

    M04.prototype.d = document.numeric.modules.DataPack;

    M04.prototype.r = document.numeric.modules.RandomFunctions;

    M04.prototype.t = document.numeric.modules.TextFunctions;

    M04.prototype.generateDataForQuestionType04 = function() {
      var dr, item, location, m, r, r1, r2, subject;
      subject = this.r.randomFromList(['person', 'bird', 'zoo', 'forest', 'animal', 'barn', 'thing', 'thing']);
      item = this.r.randomFromList(this.d.data.item[subject]);
      location = this.r.randomFromList(this.d.data.location[subject]);
      r = this.r.randomPairFromList([1, 2, 3, 4, 5, 6, 7]);
      r1 = r[0];
      r2 = r[1];
      if (((r1 % 2) === 0) && ((r2 % 2) === 0)) {
        r1 = r1 / 2;
        r2 = r2 / 2;
      }
      if (((r1 % 3) === 0) && ((r2 % 3) === 0)) {
        r1 = r1 / 3;
        r2 = r2 / 3;
      }
      m = this.r.random(2, 6);
      dr = {
        location: location,
        elements: item,
        ratio: [r1, r2],
        numbers: [r1 * m, r2 * m]
      };
      return dr;
    };

    M04.prototype.generate = function() {
      var c, data;
      data = this.generateDataForQuestionType04();
      c = {};
      c.ratio = function() {
        return data.ratio.join(':');
      };
      c.ratioFor = function(i) {
        return data.ratio[i];
      };
      c.number = function(i) {
        return data.numbers[i];
      };
      c.numberTotal = function() {
        var n, total, _i, _len, _ref;
        total = 0;
        _ref = data.numbers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          n = _ref[_i];
          total += n;
        }
        return total;
      };
      c.element = function(i) {
        return data.elements[0][i][0];
      };
      c.elements = function(i) {
        return data.elements[0][i][1];
      };
      c.item = function() {
        if (data.elements.length > 1 && data.elements[1]) {
          return data.elements[1][0];
        } else {
          return data.elements[0][0][0] + ' or ' + data.elements[0][1][0];
        }
      };
      c.items = function() {
        if (data.elements.length > 1 && data.elements[1]) {
          return data.elements[1][1];
        } else {
          return data.elements[0][0][1] + ' and ' + data.elements[0][1][1] + ' together';
        }
      };
      c.inSet = function(acting, pink) {
        var output;
        output = '';
        if (acting && data.location[2]) {
          output += data.location[2] + ' ';
        }
        if (data.location[1]) {
          output += data.location[1] + ' ';
        }
        if (pink && data.location[0].length > 1) {
          output += data.location[0][1] + ' ';
        }
        return output + data.location[0][0];
      };
      c.forEvery = function(i) {
        var output;
        if (c.ratioFor(i) === 1) {
          output = 'one ' + c.element(i);
        } else {
          output = c.ratioFor(i) + ' ' + c.elements(i);
        }
        return output;
      };
      c.forEveryThere = function(i) {
        var output;
        if (c.ratioFor(i) === 1) {
          output = 'there is one ' + c.element(i);
        } else {
          output = 'there are ' + c.ratioFor(i) + ' ' + c.elements(i);
        }
        return output;
      };
      c.thereAre = function(i) {
        var output;
        output = 'there ';
        if (c.number(i) === 1) {
          output += 'is one ' + c.element(i);
        } else {
          output += 'are ' + c.number(i) + ' ' + c.elements(i);
        }
        return output;
      };
      c.thereAreTotal = function() {
        var output, total;
        total = c.numberTotal();
        output = 'there ';
        if (total === 1) {
          output += 'is 1 ' + c.item();
        } else {
          output += 'are ' + total + ' ' + c.items();
        }
        return output;
      };
      c.ratioIsSingleVariant = function(there) {
        if (there === void 0 || there === '') {
          return 'the ratio of ' + c.elements(0) + ' to ' + c.elements(1) + ' is ' + c.ratio();
        } else {
          return 'the ratio of ' + c.elements(0) + ' to ' + c.elements(1) + ' ' + there + ' is ' + c.ratio();
        }
      };
      c.ratioIs = (function(_this) {
        return function(there) {
          if (_this.r.random(0, 2) > 0) {
            if (there === void 0 || there === '') {
              return 'the ratio of ' + c.elements(0) + ' to ' + c.elements(1) + ' is ' + c.ratio();
            } else {
              return 'the ratio of ' + c.elements(0) + ' to ' + c.elements(1) + ' ' + there + ' is ' + c.ratio();
            }
          } else {
            if (there === void 0 || there === '') {
              return 'for every ' + c.forEvery(0) + ' ' + c.forEveryThere(1);
            } else {
              return 'for every ' + c.forEvery(0) + ' ' + there + ' ' + c.forEveryThere(1);
            }
          }
        };
      })(this);
      c.howMany = function(i) {
        return 'how many ' + c.elements(i) + ' are there';
      };
      c.howManyTotal = function() {
        return 'how many ' + c.items() + ' are there';
      };
      c.ratioIsInSet = function(acting, pink) {
        return c.ratioIs(c.inSet(acting, pink));
      };
      c.thereAreInSet = function(i, acting, pink) {
        return c.thereAre(i) + ' ' + c.inSet(acting, pink);
      };
      c.thereAreTotalInSet = function(acting, pink) {
        return c.thereAreTotal() + ' ' + c.inSet(acting, pink);
      };
      c.howManyInSet = function(i, acting, pink) {
        return c.howMany(i) + ' ' + c.inSet(acting, pink);
      };
      c.howManyTotalInSet = function(acting, pink) {
        return c.howManyTotal() + ' ' + c.inSet(acting, pink);
      };
      c.generateQuestion = (function(_this) {
        return function() {
          var answer, func, knownUnknown, p1, p2, p3, question, ratioSecond;
          ratioSecond = _this.r.randomFromList([false, true]);
          knownUnknown = _this.r.randomPairFromList([0, 1, 2]);
          if (knownUnknown[0] !== 2) {
            if (ratioSecond) {
              p2 = c.thereAreInSet(knownUnknown[0], true, true);
              if (_this.r.random(0, 2) > 0) {
                p1 = c.ratioIs();
              } else {
                p1 = c.ratioIsInSet();
              }
            } else {
              p1 = c.ratioIsInSet(true, true);
              if (_this.r.random(0, 2) > 0) {
                p2 = c.thereAre(knownUnknown[0]);
              } else {
                p2 = c.thereAreInSet(knownUnknown[0], false, false);
              }
            }
          } else {
            if (ratioSecond) {
              p2 = c.thereAreTotalInSet(true, true);
              if (_this.r.random(0, 2) > 0) {
                p1 = c.ratioIs();
              } else {
                p1 = c.ratioIsInSet();
              }
            } else {
              p1 = c.ratioIsInSet(true, true);
              if (_this.r.random(0, 2) > 0) {
                p2 = c.thereAreTotal();
              } else {
                p2 = c.thereAreTotalInSet(false, false);
              }
            }
          }
          if (knownUnknown[1] === 2) {
            answer = c.numberTotal();
            if (_this.r.random(0, 2) > 0) {
              p3 = c.howManyTotal();
            } else {
              p3 = c.howManyTotalInSet(false, false);
            }
          } else {
            answer = c.number(knownUnknown[1]);
            if (_this.r.random(0, 2) > 0) {
              p3 = c.howMany(knownUnknown[1]);
            } else {
              p3 = c.howManyInSet(knownUnknown[1], false, false);
            }
          }
          func = _this.t.combine3;
          if (ratioSecond) {
            question = func(p2, p1, p3);
          } else {
            question = func(p1, p2, p3);
          }
          return [[question], answer];
        };
      })(this);
      return c.generateQuestion();
    };

    return M04;

  })();

  M05 = (function() {
    function M05() {}

    M05.prototype.r = document.numeric.modules.RandomFunctions;

    M05.prototype.generate = function() {
      var answers, closest, i, inc, inci, index, possibleAnswers, starter, tail, targetNumber, _i;
      targetNumber = this.r.random(1, 90);
      starter = 0;
      inc = [];
      for (i = _i = 1; _i <= 5; i = ++_i) {
        starter += this.r.randomFromList([0.01, 0.02, 0.03, 0.04, 0.05, 0.06]);
        inc.push(starter);
      }
      possibleAnswers = (function() {
        var _j, _len, _results;
        _results = [];
        for (_j = 0, _len = inc.length; _j < _len; _j++) {
          inci = inc[_j];
          _results.push((targetNumber + inci * this.r.randomFromList([-1, 1])).toFixed(2));
        }
        return _results;
      }).call(this);
      closest = possibleAnswers.splice(0, 1);
      this.r.shuffleListInPlace(possibleAnswers);
      index = this.r.random(0, 5);
      tail = possibleAnswers.splice(index, 10);
      answers = possibleAnswers.concat(closest).concat(tail);
      return [['Which of the following is closest in value to ' + targetNumber + '?', answers], index];
    };

    return M05;

  })();

  M06 = (function() {
    function M06() {}

    M06.prototype.u = document.numeric.modules.DataUtilities;

    M06.prototype.r = document.numeric.modules.RandomFunctions;

    M06.prototype.h = document.numeric.modules.HyperTextManager;

    M06.prototype.g = document.numeric.modules.GraphicsManager;

    M06.prototype.generate = function() {
      var Ky, answers, as, boxColor, boxPadding, canvas_height, canvas_width, correct, gridColor, i, img, imgdata, inc, index, maxScore, maxa, mina, name, names, pickedIndices, tickBump, xtick, ytick, _activity, _i, _j, _k, _l, _ref, _ref1, _ref2, _scores;
      _activity = 'the scores that 5 students earned on a quiz';
      _scores = 'scores';
      _ref = [50, 92], mina = _ref[0], maxa = _ref[1];
      as = [];
      for (i = _i = 1; _i <= 5; i = ++_i) {
        as.push(this.r.random(mina, maxa + 1));
      }
      names = (function() {
        var _j, _len, _ref1, _results;
        _ref1 = this.u.randomNames(5, function(n) {
          return n.length < 9;
        });
        _results = [];
        for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
          name = _ref1[_j];
          _results.push(name[0]);
        }
        return _results;
      }).call(this);
      pickedIndices = this.r.randomNonRepeating([0, 1, 2, 3, 4], 2);
      correct = (as[pickedIndices[0]] + as[pickedIndices[1]]) / 2;
      inc = [correct + this.r.randomFromList([-2.5, 2.5, -5, 5]), correct + this.r.randomFromList([-7.5, 7.5, -10, 10, -10.5, 10.5]), correct + this.r.randomFromList([-15.5, 15.5, -15, 15, -20.5, 20.5, -20, 20]), correct + this.r.randomFromList([-25.5, 25.5, -25, 25, -30.5, 30.5, -30, 30])];
      _ref1 = this.r.shuffleAnswers4(inc, correct), answers = _ref1[0], index = _ref1[1];
      maxScore = 100;
      canvas_height = 250;
      canvas_width = 250;
      _ref2 = [canvas_width / 5, canvas_height / 10], xtick = _ref2[0], ytick = _ref2[1];
      Ky = canvas_height / maxScore;
      gridColor = 'L';
      tickBump = 3;
      boxColor = 'G';
      boxPadding = 10;
      img = this.g.newImageWhiteWithOffset(canvas_width, canvas_height, 35, 5, 5, 15);
      for (i = _j = 0; _j <= 10; i = ++_j) {
        img.drawLine(-tickBump, i * ytick, canvas_width, i * ytick, gridColor);
      }
      for (i = _k = 0; _k <= 5; i = ++_k) {
        img.placeCharSequenceCentered(-13, 2 * i * ytick, '' + i * 20);
        img.drawLine(i * xtick, -tickBump, i * xtick, canvas_height, gridColor);
      }
      for (i = _l = 0; _l <= 4; i = ++_l) {
        img.fillRectangleCoords(i * xtick + boxPadding, 0, (i + 1) * xtick - boxPadding, Ky * as[i], boxColor);
        img.placeCharSequence((i + 0.5) * xtick - 6, Ky * as[i] + 4, '' + as[i]);
        img.placeCharSequenceCentered((i + 0.5) * xtick, -6, '' + names[i].toUpperCase());
      }
      imgdata = img.getBase64();
      return [['The graph shows ' + _activity + '. What is the average of ' + names[pickedIndices[0]] + ' and ' + names[pickedIndices[1]] + '\'s ' + _scores + '?' + this.h.graphic(imgdata), answers], index];
    };

    return M06;

  })();

  M07 = (function() {
    function M07() {}

    M07.prototype.r = document.numeric.modules.RandomFunctions;

    M07.prototype.generate = function() {
      var Q, a, b, q;
      a = this.r.random(2, 10);
      b = this.r.random(2, 10);
      q = this.r.random(2, 10);
      Q = this.r.randomVariableLetter();
      return [['If ' + q * a + ' ÷ ' + Q + ' = ' + a + ', then ' + b + ' x ' + Q + ' = ?'], b * q];
    };

    return M07;

  })();

  M08 = (function() {
    function M08() {}

    M08.prototype.u = document.numeric.modules.RandomFunctions;

    M08.prototype.h = document.numeric.modules.HyperTextManager;

    M08.prototype.generate = function() {
      var a, an, answers, b, index, o, p, _ref;
      a = this.u.random(2, 9);
      b = this.u.randomNonRepeating([11, 13, 17, 19, 23, 29, 31], 4);
      b.sort();
      p = b.concat();
      o = [[b[3], b[2], b[1], b[0]], [b[3], b[1], b[2], b[0]], [b[0], b[2], b[1], b[3]], [b[2], b[1], b[0], b[3]]];
      _ref = this.u.shuffleAnswers4(o, p), answers = _ref[0], index = _ref[1];
      answers = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = answers.length; _i < _len; _i++) {
          an = answers[_i];
          _results.push((this.h.fraction(a, an[0])) + ', ' + (this.h.fraction(a, an[1])) + ', ' + (this.h.fraction(a, an[2])) + ', ' + (this.h.fraction(a, an[3])));
        }
        return _results;
      }).call(this);
      return [['Which of the below fractions are ordered from largest to smallest?', answers], index];
    };

    return M08;

  })();

  M09 = (function() {
    function M09() {}

    M09.prototype.u = document.numeric.modules.RandomFunctions;

    M09.prototype.h = document.numeric.modules.HyperTextManager;

    M09.prototype.g = document.numeric.modules.GraphicsManager;

    M09.prototype.generate = function() {
      var K, a, aa, b, bb, img, imgdata;
      a = this.u.random(3, 9);
      b = this.u.random(4, 10);
      if (a % 2 === 1 && b % 2 === 1) {
        a = a + 1;
      }
      bb = 110;
      K = bb / b;
      aa = a * K;
      img = this.g.newImageWhiteWithOffset(aa, bb, 20);
      img.drawTriangle(0, 0, 0, bb, aa, 0, 'B');
      img.drawRectangle(0, 0, 10, 10, 'B');
      img.placeCharSequence(Math.floor(aa / 2) - 4, -11, '' + a);
      img.placeCharSequence(-10, Math.floor(bb / 2), '' + b);
      imgdata = img.getBase64();
      return [['If the area of a triangle is ½ × base × vertical height, what is the area of the triangle?' + this.h.graphic(imgdata)], Math.round(a * b / 2)];
    };

    return M09;

  })();

  M10 = (function() {
    function M10() {}

    M10.prototype.u = document.numeric.modules.RandomFunctions;

    M10.prototype.h = document.numeric.modules.HyperTextManager;

    M10.prototype.generate = function() {
      var answers, digit, digits, index;
      digits = this.u.randomNonRepeating([1, 2, 3, 4, 5, 6, 7, 8, 9], 5);
      index = this.u.random(0, 5);
      digit = digits[index];
      answers = [this.h.fraction(digit, 10), this.h.fraction(digit, 100), this.h.fraction(digit, '1,000'), this.h.fraction(digit, '10,000'), this.h.fraction(digit, '100,000')];
      return [['In the decimal 0.' + digits.join('') + ', the digit ' + digit + ' is equal to which of the following?', answers], index];
    };

    return M10;

  })();

  M11 = (function() {
    function M11() {}

    M11.prototype.u = document.numeric.modules.RandomFunctions;

    M11.prototype.generate = function() {
      var a, b;
      a = this.u.random(21, 50);
      b = this.u.random(11, 40);
      return [['' + (a + b) + ' - ' + a + ' = ?'], b];
    };

    return M11;

  })();

  M12 = (function() {
    function M12() {}

    M12.prototype.u = document.numeric.modules.RandomFunctions;

    M12.prototype.h = document.numeric.modules.HyperTextManager;

    M12.prototype.g = document.numeric.modules.GraphicsManager;

    M12.prototype.generate = function() {
      var K, a, aa, b, bb, img, imgdata;
      a = this.u.random(3, 9);
      b = this.u.random(4, 10);
      bb = 110;
      K = bb / b;
      aa = a * K;
      img = this.g.newImageWhiteWithOffset(aa, bb, 20);
      img.drawRectangle(0, 0, aa, bb, 'B');
      img.placeCharSequence(Math.floor(aa / 2) - 4, -11, '' + a);
      img.placeCharSequence(-10, Math.floor(bb / 2), '?');
      imgdata = img.getBase64();
      return [['The area of the rectangle shown is ' + a * b + ' centimeters squared. The length of one of the sides is ' + a + ' centimeters. What is the length of the other side?' + this.h.graphic(imgdata)], b];
    };

    return M12;

  })();

  M13 = (function() {
    function M13() {}

    M13.prototype.u = document.numeric.modules.RandomFunctions;

    M13.prototype.generate = function() {
      var a;
      a = this.u.random(3, 8);
      a = (a / 2).toFixed(1);
      return [['' + a + ' m = _ cm?'], a * 100];
    };

    return M13;

  })();

  M14 = (function() {
    function M14() {}

    M14.prototype.u = document.numeric.modules.DataUtilities;

    M14.prototype.r = document.numeric.modules.RandomFunctions;

    M14.prototype.generate = function() {
      var diff1, diff1e, diff1w, diff2, diff2e, diff2w, luis, names;
      luis = this.r.random(11, 30);
      diff1 = this.r.random(3, Math.floor(luis / 2));
      diff2 = this.r.random(3, Math.floor(luis / 2));
      while (diff1 === diff2) {
        diff2 = this.r.random(2, Math.floor(luis / 2));
      }
      if (this.r.randomAB()) {
        diff1e = luis - diff1;
        diff1w = 'more';
      } else {
        diff1e = luis + diff1;
        diff1w = 'less';
      }
      if (this.r.randomAB()) {
        diff2e = luis - diff2;
        diff2w = 'less';
      } else {
        diff2e = luis + diff2;
        diff2w = 'more';
      }
      names = this.u.randomNames(2);
      return [['' + names[0][0] + ' has $' + diff1 + ' dollars ' + diff1w + ' than $' + diff1e + '. How much money does ' + names[1][0] + ' have if ' + names[1][1] + ' has $' + diff2 + ' ' + diff2w + ' than ' + names[0][0]], diff2e];
    };

    return M14;

  })();

  M15 = (function() {
    function M15() {}

    M15.prototype.u = document.numeric.modules.RandomFunctions;

    M15.prototype.d = document.numeric.modules.DataPack;

    M15.prototype.h = document.numeric.modules.HyperTextManager;

    M15.prototype.t = document.numeric.modules.TextFunctions;

    M15.prototype.generate = function() {
      var answers, convertPrice, correct, i, inc, index, items, pick, picked, pickedIndices, price, prices, table, type, types, _i, _ref, _ref1, _results;
      items = this.u.randomFromList(this.d.data.itemsWithPrices);
      types = items[0][0];
      type = items[0][1];
      prices = items[0][2];
      price = items[0][3];
      convertPrice = function(p) {
        return items[0][4][0] + p + ' ' + items[0][4][1];
      };
      pickedIndices = this.u.randomNonRepeating((function() {
        _results = [];
        for (var _i = 0, _ref = items[1].length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this), 4);
      picked = (function() {
        var _j, _len, _results1;
        _results1 = [];
        for (_j = 0, _len = pickedIndices.length; _j < _len; _j++) {
          i = pickedIndices[_j];
          _results1.push(items[1][i]);
        }
        return _results1;
      })();
      correct = (picked.reduce((function(x, y) {
        return [1, x[1] + y[1]];
      })))[1] / 4;
      inc = [correct + this.u.randomFromList([-1.50, -1.25, 1.25, 1.50]), correct + this.u.randomFromList([-3, -2, 2, 3]), correct + this.u.randomFromList([-4.50, -4, 4, 4.50]), correct + this.u.randomFromList([-10, -9, -8, -7, -6, -5, 5, 6, 7, 8, 9, 10])];
      _ref1 = this.u.shuffleAnswers4(inc, correct), answers = _ref1[0], index = _ref1[1];
      table = this.h.tableWrapped((function() {
        var _j, _len, _results1;
        _results1 = [];
        for (_j = 0, _len = picked.length; _j < _len; _j++) {
          pick = picked[_j];
          _results1.push([pick[0], convertPrice(pick[1])]);
        }
        return _results1;
      })(), [this.t.capitalize(type), this.t.capitalize(price)]);
      return [['The table below shows the ' + prices + ' for 4 ' + types + '. What is the average ' + price + '? <br>' + table, answers], index];
    };

    return M15;

  })();

  M16 = (function() {
    function M16() {
      this.randomBuyableItem = __bind(this.randomBuyableItem, this);
    }

    M16.prototype.r = document.numeric.modules.RandomFunctions;

    M16.prototype.u = document.numeric.modules.DataUtilities;

    M16.prototype.d = document.numeric.modules.DataPack;

    M16.prototype.randomBuyableItem = function() {
      return this.randomFromList(DataPack.data.buyable);
    };

    M16.prototype.generate = function() {
      var A, B, answer, answers, binder, correct, diffs, index, mother, sasha, toNumber, toString, toTuple, _ref;
      diffs = this.r.randomNonRepeating([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], 5);
      correct = diffs.splice(this.r.random(0, 5), 1)[0];
      toTuple = function(s) {
        var D, N, Q;
        Q = Math.floor(s / 4);
        s = s - Q * 4;
        D = Math.floor(s / 2);
        N = s - D * 2;
        return [Q, D, N];
      };
      toNumber = function(s) {
        var D, N, Q, _ref;
        _ref = toTuple(s), Q = _ref[0], D = _ref[1], N = _ref[2];
        return Q * 0.25 + D * 0.10 + N * 0.05;
      };
      toString = function(s) {
        var D, N, Q, output, _ref;
        _ref = toTuple(s), Q = _ref[0], D = _ref[1], N = _ref[2];
        output = [];
        if (Q === 1) {
          output.push('1 quarter');
        } else if (Q > 1) {
          output.push('' + Q + ' quarters');
        }
        if (D === 1) {
          output.push('1 dime');
        } else if (D > 1) {
          output.push('' + D + ' dimes');
        }
        if (N === 1) {
          output.push('1 nickel');
        } else if (N > 1) {
          output.push('' + N + ' nickels');
        }
        s = '';
        if (output.length === 0) {
          s = '';
        } else if (output.length === 1) {
          s = output[0];
        } else if (output.length === 2) {
          s = output[0] + ' and ' + output[1];
        } else {
          output[output.length - 1] = 'and ' + output[output.length - 1];
          s = output.join(', ');
        }
        return s;
      };
      _ref = this.r.shuffleAnswers4(diffs, correct), answers = _ref[0], index = _ref[1];
      answers = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = answers.length; _i < _len; _i++) {
          answer = answers[_i];
          _results.push(toString(answer));
        }
        return _results;
      })();
      sasha = this.u.randomName();
      binder = this.r.randomFromList(this.d.data.buyable);
      A = this.r.random(200, 800);
      A = Math.round(A / 5) * 5 / 100;
      B = A + toNumber(correct);
      A = A.toFixed(2);
      B = B.toFixed(2);
      mother = this.r.randomFromList(['mother', 'father', 'friend', 'classmate']);
      return [['' + sasha[0] + ' wants to buy ' + binder + ' that costs $' + B + '. However, ' + sasha[1] + ' has only $' + A + '. What coins could ' + sasha[0] + '\'s ' + mother + ' give ' + sasha[2] + ' so that ' + sasha[1] + ' would have exactly $' + B + '?', answers], index];
    };

    return M16;

  })();

  M17 = (function() {
    function M17() {}

    M17.prototype.u = document.numeric.modules.RandomFunctions;

    M17.prototype.generate = function() {
      var answer, answers, index, o, p, _ref;
      p = this.u.randomFromList([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]);
      o = this.u.randomNonRepeating([4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 38, 39, 40, 42, 44, 45, 46, 48, 49, 50], 4);
      _ref = this.u.shuffleAnswers4(o, p), answers = _ref[0], index = _ref[1];
      answers = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = answers.length; _i < _len; _i++) {
          answer = answers[_i];
          _results.push('' + answer);
        }
        return _results;
      })();
      return [['Which of the numbers below is a prime number?', answers], index];
    };

    return M17;

  })();

  M18 = (function() {
    function M18() {}

    M18.prototype.u = document.numeric.modules.RandomFunctions;

    M18.prototype.generate = function() {
      var a, b;
      a = this.u.random(111, 450);
      b = this.u.random(111, 450);
      return [['What is the value of the expression ' + a + ' + ' + b + '?'], a + b];
    };

    return M18;

  })();

  M19 = (function() {
    function M19() {}

    M19.prototype.u = document.numeric.modules.RandomFunctions;

    M19.prototype.generate = function() {
      var a;
      a = this.u.random(3, 8);
      a = (a / 2).toFixed(1);
      return [['' + a + ' ft. = _ inches?'], a * 12];
    };

    return M19;

  })();

  M20 = (function() {
    function M20() {}

    M20.prototype.u = document.numeric.modules.RandomFunctions;

    M20.prototype.h = document.numeric.modules.HyperTextManager;

    M20.prototype.g = document.numeric.modules.GraphicsManager;

    M20.prototype.generate = function() {
      var K, a, aa, b, bb, img, imgdata;
      a = this.u.random(3, 9);
      b = this.u.random(4, 10);
      if (a % 2 === 1 && b % 2 === 1) {
        a = a + 1;
      }
      bb = 110;
      K = bb / b;
      aa = a * K;
      img = this.g.newImageWhiteWithOffset(aa + bb, bb, 20);
      img.drawTriangle(bb, 0, bb, bb, bb + aa, 0, 'B');
      img.drawRectangle(0, 0, bb, bb, 'B');
      img.placeCharSequence(Math.floor(bb / 2) - 4, -11, '' + b);
      img.placeCharSequence(bb - 10, Math.floor(bb / 2), '' + b);
      img.placeCharSequence(bb + Math.floor(aa / 2) - 4, -11, '' + a);
      imgdata = img.getBase64();
      return [['If the area of a triangle is ½ × base × vertical height, what is the combined area of the square and triangle below?' + this.h.graphic(imgdata)], b * b + Math.round(a * b / 2)];
    };

    return M20;

  })();

  M21 = (function() {
    function M21() {}

    M21.prototype.u = document.numeric.modules.RandomFunctions;

    M21.prototype.generate = function() {
      var a, b, k, _ref;
      k = this.u.random(2, 10);
      _ref = this.u.randomPairFromList([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), a = _ref[0], b = _ref[1];
      return [['' + a + ' is to ' + a * k + ' as ' + b + ' is to _ ?'], b * k];
    };

    return M21;

  })();

  M22 = (function() {
    function M22() {}

    M22.prototype.u = document.numeric.modules.RandomFunctions;

    M22.prototype.t = document.numeric.modules.TextFunctions;

    M22.prototype.generate = function() {
      var a, answers, b, c, d, index, o, p, pstring, zeroC, _ref, _ref1;
      a = this.u.random(1, 9);
      b = 0;
      c = this.u.random(1, 9);
      d = this.u.random(1, 9);
      zeroC = this.u.randomAB();
      if (zeroC) {
        _ref = [c, b], b = _ref[0], c = _ref[1];
      }
      p = '' + a + ',' + b + c + d;
      pstring = '' + this.t.digitToWord(a) + ' thousand';
      if (zeroC) {
        pstring += ' ' + this.t.digitToWord(b) + ' hundred and ' + this.t.digitToWord(d);
        o = ['' + a + ',' + b + d + '0', '' + a + ',' + b + b + d, '' + a + '0,0' + b + d, '' + a + '0,' + b + '0' + d];
      } else {
        pstring += ' ' + this.t.twoDigitToWords(c, d);
        o = ['' + a + ',' + c + '0' + d, '' + a + ',' + c + c + d, '' + a + '0,0' + c + d, '' + a + '0,' + c + '0' + d];
      }
      _ref1 = this.u.shuffleAnswers4(o, p), answers = _ref1[0], index = _ref1[1];
      return [['Which is ' + pstring + '?', answers], index];
    };

    return M22;

  })();

  M23 = (function() {
    function M23() {}

    M23.prototype.u = document.numeric.modules.RandomFunctions;

    M23.prototype.h = document.numeric.modules.HyperTextManager;

    M23.prototype.m = document.numeric.modules.MathFunctions;

    M23.prototype.generate = function() {
      var K, M, a, answer, answers, b, correct, inc, index, m, n, _ref, _ref1, _ref2, _ref3, _ref4;
      _ref = this.u.randomPairFromList([1, 2, 3, 5]), a = _ref[0], b = _ref[1];
      if (a > b) {
        _ref1 = [b, a], a = _ref1[0], b = _ref1[1];
      }
      m = this.u.random(a + 1, 3 * a + 1);
      n = this.u.random(b + 1, 3 * b + 1);
      while (n / b === m / a || n > 9) {
        n = this.u.random(b + 1, 3 * b + 1);
      }
      _ref2 = this.m.reduce(a, m), a = _ref2[0], m = _ref2[1];
      _ref3 = this.m.reduce(b, n), b = _ref3[0], n = _ref3[1];
      K = a * n + b * m;
      M = m * n;
      correct = this.m.reduce(K, M);
      inc = [];
      inc.push(this.m.reduce(a + b, m + n));
      inc.push(this.m.reduce(a + b, m * n));
      inc.push(this.m.reduce(a + n, m * n));
      inc.push(this.m.reduce(a * n + b * m, m + n));
      _ref4 = this.u.shuffleAnswers4(inc, correct), answers = _ref4[0], index = _ref4[1];
      answers = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = answers.length; _i < _len; _i++) {
          answer = answers[_i];
          _results.push('' + this.h.fraction(answer[0], answer[1]));
        }
        return _results;
      }).call(this);
      return [['What is ' + this.h.fraction(a, m) + ' + ' + this.h.fraction(b, n) + '?', answers], index];
    };

    return M23;

  })();

  M24 = (function() {
    function M24() {}

    M24.prototype.u = document.numeric.modules.RandomFunctions;

    M24.prototype.generate = function() {
      var Q, a, b, q;
      a = this.u.random(2, 10);
      b = this.u.random(2, 10);
      q = this.u.random(2, 10);
      Q = this.u.randomVariableLetter();
      return [['If ' + q * a + ' ÷ ' + Q + ' = ' + a + ', then ' + b + ' x ' + Q + ' = ?'], b * q];
    };

    return M24;

  })();

  M25 = (function() {
    function M25() {}

    M25.prototype.u = document.numeric.modules.RandomFunctions;

    M25.prototype.h = document.numeric.modules.HyperTextManager;

    M25.prototype.g = document.numeric.modules.GraphicsManager;

    M25.prototype.generate = function() {
      var K, a, aa, ah, ahp, an, answers, b, bb, bn, cc, correct, dark, img, imgdata, inc, index, _ref;
      an = this.u.random(4, 12);
      ah = Math.ceil(an / 2);
      ahp = Math.floor(an * 3 / 2);
      bn = this.u.random(ah + 1, ahp);
      a = an / 2;
      b = bn / 2;
      aa = 100;
      K = aa / a;
      bb = b * K;
      cc = Math.sqrt(bb * bb - (aa * aa / 4));
      img = this.g.newImageWhiteWithOffset(aa + cc, aa, 20);
      dark = 'D';
      img.drawLine(0, 0, 0, aa, dark);
      img.drawLine(0, aa, aa, aa, dark);
      img.drawLine(aa, aa, aa + cc, aa / 2, dark);
      img.drawLine(aa + cc, aa / 2, aa, 0, dark);
      img.drawLine(aa, 0, 0, 0, dark);
      img.placeCharSequence(Math.floor(aa / 2) - 4, -11, '' + a);
      img.placeCharSequence(-19, Math.floor(aa / 2), '' + a);
      img.placeCharSequence(Math.floor(aa / 2) - 4, aa + 4, '' + a);
      img.placeCharSequence(Math.floor(aa + cc / 2), (aa * 3 / 4) + 7, '' + b);
      img.placeCharSequence(Math.floor(aa + cc / 2), (aa / 4) - 11, '' + b);
      imgdata = img.getBase64();
      correct = a * 3 + b * 2;
      inc = [correct + a, correct - a, correct - 2 * b, correct + this.u.random(1, 3)];
      _ref = this.u.shuffleAnswers4(inc, correct), answers = _ref[0], index = _ref[1];
      return [['What is the perimeter of the shape shown below?' + this.h.graphic(imgdata), answers], index];
    };

    return M25;

  })();

  M26 = (function() {
    function M26() {}

    M26.prototype.u = document.numeric.modules.RandomFunctions;

    M26.prototype.h = document.numeric.modules.HyperTextManager;

    M26.prototype.m = document.numeric.modules.MathFunctions;

    M26.prototype.generate = function() {
      var a, answer, answers, b, case1, correct, inc, index, n, _ref, _ref1;
      n = this.u.random(3, 8);
      a = this.u.random(1, 6);
      b = a + this.u.random(2, 5);
      _ref = this.m.reduce(a, b), a = _ref[0], b = _ref[1];
      correct = [n, a, b];
      inc = [];
      case1 = false;
      if (this.u.randomAB()) {
        inc.push([n - this.u.random(1, 3), a, b * 2]);
        case1 = true;
      } else if (this.u.randomAB()) {
        inc.push([n - this.u.random(1, 3), a + 1, b]);
      } else {
        inc.push([n, a, b]);
      }
      if (this.u.randomAB()) {
        inc.push([n + this.u.random(1, 3), Math.max(1, a - 1), b]);
      } else {
        inc.push([n - this.u.random(1, 3), Math.max(1, a - 1), b]);
      }
      if (this.u.randomAB()) {
        if (a > 1) {
          inc.push([n + this.u.random(1, 3), a + 1, b * 2]);
        } else {
          inc.push([n + this.u.random(1, 3), a, b * 2]);
        }
      } else {
        inc.push([n, a + this.u.random(1, 3), b * 2]);
      }
      if (this.u.randomAB() > 0 || case1) {
        inc.push([n, a, b * 2]);
      } else {
        inc.push([n - this.u.random(1, 3), a, b * 2]);
      }
      _ref1 = this.u.shuffleAnswers4(inc, correct), answers = _ref1[0], index = _ref1[1];
      answers = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = answers.length; _i < _len; _i++) {
          answer = answers[_i];
          _results.push([answer[0]].concat(this.m.reduce(answer[1], answer[2])));
        }
        return _results;
      }).call(this);
      answers = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = answers.length; _i < _len; _i++) {
          answer = answers[_i];
          _results.push('' + answer[0] + this.h.fraction(answer[1], answer[2]));
        }
        return _results;
      }).call(this);
      return [['What is ' + this.h.fraction(n * b + a, b) + ' expressed as a mixed number?', answers], index];
    };

    return M26;

  })();

  M27 = (function() {
    function M27() {}

    M27.prototype.u = document.numeric.modules.RandomFunctions;

    M27.prototype.h = document.numeric.modules.HyperTextManager;

    M27.prototype.generate = function() {
      var a, answer, answers, diff, diff2, diff3, f, friends, i, index, offset, p, person, pies, smallest;
      pies = 'pies';
      friends = 'friends';
      person = 'person';
      p = this.u.random(17, 50);
      f = this.u.random(5, 8);
      diff = this.u.random(1, 4);
      diff2 = this.u.random(2, 5);
      diff3 = this.u.random(3, 6);
      answers = [[f - 1, p], [f + 1, p], [p - diff, f - 1], [p - diff, f + diff3], [p + diff2, f - 1]];
      this.u.shuffleListInPlace(answers);
      smallest = 100;
      index = -1;
      for (i in answers) {
        a = answers[i];
        offset = Math.abs(a[0] / a[1] - p / f);
        if (offset < smallest) {
          smallest = offset;
          index = i;
        }
      }
      answers = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = answers.length; _i < _len; _i++) {
          answer = answers[_i];
          _results.push('' + this.h.fraction(answer[0], answer[1]));
        }
        return _results;
      }).call(this);
      return [['' + p + ' ' + pies + ' will be divided evenly among ' + f + ' ' + friends + '. Of the below, which expression gives the best estimate of the total number of ' + pies + ' each ' + person + ' will receive?', answers], index];
    };

    return M27;

  })();

  M28 = (function() {
    function M28() {}

    M28.prototype.u = document.numeric.modules.RandomFunctions;

    M28.prototype.h = document.numeric.modules.HyperTextManager;

    M28.prototype.g = document.numeric.modules.GraphicsManager;

    M28.prototype.generate = function() {
      var A, B, C, D1, D2, H, L, answers, correct, d, d1, d2, dark, dh, h, i, img, imgdata, inc, index, o, t, tick, w, x, _i, _j, _ref, _ref1;
      d = this.u.random(3, 6);
      dh = d / 2;
      A = this.u.random(-7, -1);
      d1 = this.u.random(2, 3) * 2;
      D1 = d1 * dh;
      d2 = this.u.random(2, 4) * 2;
      D2 = d2 * dh;
      B = A + D1;
      C = B + D2;
      h = 60;
      w = 250;
      tick = w / (d1 + d2 + 2);
      img = this.g.newImageWhiteWithOffset(w, h, 20);
      dark = 'D';
      H = 2 * h / 3;
      L = h / 3;
      img.drawLine(0, H, w, H, dark);
      img.drawLine(0, H, 5, H - 3, dark);
      img.drawLine(0, H, 5, H + 3, dark);
      img.drawLine(w, H, w - 5, H - 3, dark);
      img.drawLine(w, H, w - 5, H + 3, dark);
      for (t = _i = 0, _ref = d1 + d2; 0 <= _ref ? _i <= _ref : _i >= _ref; t = 0 <= _ref ? ++_i : --_i) {
        x = (t + 1) * tick;
        img.drawLine(x, H - 5, x, H + 5, dark);
      }
      img.drawLine(tick, L, tick, H - 8);
      img.drawLine(tick, H - 8, tick - 2, H - 8 - 4);
      img.drawLine(tick, H - 8, tick + 2, H - 8 - 4);
      img.placeCharSequence(tick - 8, L - 12, '' + A, dark);
      x = tick * (d1 + 1);
      img.drawLine(x, L, x, H - 8);
      img.drawLine(x, H - 8, x - 2, H - 8 - 4);
      img.drawLine(x, H - 8, x + 2, H - 8 - 4);
      img.placeCharSequence(x - 2, L - 12, '?', dark);
      x = tick * (d1 + d2 + 1);
      img.drawLine(x, L, x, H - 8);
      img.drawLine(x, H - 8, x - 2, H - 8 - 4);
      img.drawLine(x, H - 8, x + 2, H - 8 - 4);
      img.placeCharSequence(x - 2, L - 12, '' + C, dark);
      imgdata = img.getBase64();
      correct = B;
      o = this.u.random(-4, 1);
      inc = [];
      for (i = _j = 0; _j <= 4; i = ++_j) {
        if (o + i !== 0) {
          inc.push(B + o + i);
        }
      }
      _ref1 = this.u.shuffleAnswers4(inc, correct), answers = _ref1[0], index = _ref1[1];
      return [['Use the number line below to answer the question. The hash marks are evenly spaced. What number is the vertical arrow with question mark pointing to on the number line?' + this.h.graphic(imgdata), answers], index];
    };

    return M28;

  })();

  M29 = (function() {
    function M29() {}

    M29.prototype.u = document.numeric.modules.RandomFunctions;

    M29.prototype.h = document.numeric.modules.HyperTextManager;

    M29.prototype.m = document.numeric.modules.MathFunctions;

    M29.prototype.generate = function() {
      var K, M, a, answer, answers, b, correct, inc, index, m, n, _ref, _ref1, _ref2, _ref3, _ref4;
      _ref = this.u.randomPairFromList([1, 2, 3, 5]), a = _ref[0], b = _ref[1];
      if (a > b) {
        _ref1 = [b, a], a = _ref1[0], b = _ref1[1];
      }
      m = this.u.random(a + 1, 3 * a + 1);
      n = this.u.random(b + 1, 3 * b + 1);
      while (n / b === m / a || n > 9) {
        n = this.u.random(b + 1, 3 * b + 1);
      }
      _ref2 = this.m.reduce(a, m), a = _ref2[0], m = _ref2[1];
      _ref3 = this.m.reduce(b, n), b = _ref3[0], n = _ref3[1];
      K = a * b;
      M = m * n;
      correct = this.m.reduce(K, M);
      inc = [];
      inc.push(this.m.reduce(a + b, m * n));
      inc.push(this.m.reduce(a * b, m * b));
      inc.push(this.m.reduce(a + b, m + n));
      inc.push(this.m.reduce(1, m + n));
      _ref4 = this.u.shuffleAnswers4(inc, correct), answers = _ref4[0], index = _ref4[1];
      answers = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = answers.length; _i < _len; _i++) {
          answer = answers[_i];
          _results.push('' + this.h.fraction(answer[0], answer[1]));
        }
        return _results;
      }).call(this);
      return [['What is ' + this.h.fraction(a, m) + ' x ' + this.h.fraction(b, n) + '?', answers], index];
    };

    return M29;

  })();

  M30 = (function() {
    function M30() {}

    M30.prototype.u = document.numeric.modules.RandomFunctions;

    M30.prototype.generate = function() {
      var answers, d, els, f, inc, index, init, last, _ref;
      d = this.u.randomFromList([-3, -2, -1, 1, 2, 3]);
      f = function(n) {
        return Math.round(Math.pow(2, n + 1) + d);
      };
      els = [f(1), f(2), f(3), f(4), f(5)];
      init = els.slice(0, 4);
      last = els[4];
      inc = [
        last - 2, init.reduce(function(x, y) {
          return x + y;
        }), last + this.u.randomFromList([-4, 4]), last + this.u.randomFromList([-6, 6])
      ];
      _ref = this.u.shuffleAnswers4(inc, last), answers = _ref[0], index = _ref[1];
      return [['What is the next number in the pattern  ' + init.join(', ') + ', ...?', answers], index];
    };

    return M30;

  })();

  ProblemSet = (function() {
    var getOrder, getProblemNumber;

    function ProblemSet() {
      this.createNextQuestion = __bind(this.createNextQuestion, this);
      this.previousQuestion = 0;
      this.units = {
        1: new M01(),
        2: new M02(),
        3: new M03(),
        4: new M04(),
        5: new M05(),
        6: new M06(),
        7: new M07(),
        8: new M08(),
        9: new M09(),
        10: new M10(),
        11: new M11(),
        12: new M12(),
        13: new M13(),
        14: new M14(),
        15: new M15(),
        16: new M16(),
        17: new M17(),
        18: new M18(),
        19: new M19(),
        20: new M20(),
        21: new M21(),
        22: new M22(),
        23: new M23(),
        24: new M24(),
        25: new M25(),
        26: new M26(),
        27: new M27(),
        28: new M28(),
        29: new M29(),
        30: new M30()
      };
    }

    ProblemSet.prototype.parameters = {
      p10_serveOrder: {
        name: 'nextproblem',
        description: 'Order of questions:',
        type: 'discrete',
        levels: ['same', 'random', 'sequential'],
        selectedValue: 'random'
      },
      p20_fixedProblemNumber: {
        name: 'problemnumber',
        description: 'Jump to question number:',
        type: 'discrete',
        levels: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
        jump: true,
        selectedValue: void 0
      }
    };

    getOrder = function() {
      return ProblemSet.parameters.p10_serveOrder.selectedValue;
    };

    getProblemNumber = function() {
      return ProblemSet.parameters.p20_fixedProblemNumber.selectedValue;
    };

    ProblemSet.prototype.createNextQuestion = function() {
      var num, qa, qq;
      if (this.parameters.p20_fixedProblemNumber.selectedValue !== void 0) {
        num = this.parameters.p20_fixedProblemNumber.selectedValue;
      } else {
        if (this.parameters.p10_serveOrder.selectedValue === 'random') {
          num = 1 + Math.random() * 30 | 0;
        } else if (this.parameters.p10_serveOrder.selectedValue === 'sequential') {
          num = this.previousQuestion + 1;
          if (num > 30) {
            return void 0;
          }
        } else {
          num = this.previousQuestion;
        }
      }
      this.parameters.p20_fixedProblemNumber.selectedValue = void 0;
      this.previousQuestion = num;
      qa = this.units[num].generate(num);
      qq = {
        statement: qa[0][0],
        checkAnswer: function(answer) {
          return answer === qa[1];
        },
        getAnswer: function() {
          return qa[1];
        }
      };
      if (qa[0].length > 1) {
        qq.answerType = 'multiple';
        qq.choices = qa[0][1];
      } else {
        qq.answerType = 'numeric';
      }
      return qq;
    };

    return ProblemSet;

  })();

  document.numeric.numericTasks['com.sparkydots.numeric.tasks.ssat.c.q00'] = new ProblemSet();

}).call(this);
